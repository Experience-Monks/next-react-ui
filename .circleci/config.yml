# This project needs to following CircleCI Environment Variables:
# AWS_ACCESS_KEY_ID_DEV
# AWS_ACCESS_KEY_ID_STAGE
# AWS_ACCESS_KEY_ID_PROD
# AWS_SECRET_ACCESS_KEY_DEV
# AWS_SECRET_ACCESS_KEY_STAGE
# AWS_SECRET_ACCESS_KEY_PROD
# AWS_REGION

# ENVIRONMENT_DOMAIN_DEV = xxx.xxx.com (without the protocol)
# ENVIRONMENT_DOMAIN_STAGE = xxx.xxx.com (without the protocol)
# ENVIRONMENT_DOMAIN_PROD = xxx.xxx.com (without the protocol)

# S3_ORIGIN_DEV = jam3-xxx-xxx-xxx-xxx-origin
# S3_ORIGIN_STAGE = jam3-xxx-xxx-xxx-xxx-origin
# S3_ORIGIN_PROD = jam3-xxx-xxx-xxx-xxx-origin

# CLOUDFRONT_ID_DEV = XXXXXXXXXXX
# CLOUDFRONT_ID_STAGE = XXXXXXXXXXX
# CLOUDFRONT_ID_PROD = XXXXXXXXXXX

# for auto tagging
# GITHUB_PROJECT = github.com/jam3/xxxxx

# SLACK_CHANNEL_ID = XXXXXXXXXXX

# Other tools:
# To include a SAST, please use SonarCloud directly

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  github-cli: circleci/github-cli@2.1.0
  slack: circleci/slack@4.10.1
  lighthouse-check: foo-software/lighthouse-check@0.0.13
  gitleaks: upenn-libraries/gitleaks@0.1.0

#################################
#
# Variables
#
#################################

default-container: &node-container
  docker:
    - image: cimg/node:16.15.1

env-suffix-parameter: &env-suffix-parameter
  env_suffix:
    description: 'Dynamic env variable suffix'
    type: enum
    enum: ['', '_DEV', '_STAGE', '_PROD', '_CLIENT']
    default: ''

slack-notification-parameters: &slack-notification-parameters
  slack_channel:
    description: 'Slack channel id'
    default: C03R1QXQZG9
    type: string
  environment:
    description: 'Type of message to send to slack'
    type: enum
    enum: ['Develop', 'Staging', 'Production']
    default: 'Develop'

#################################
#
# Commands start
#
#################################

commands:
  configure-aws-cli:
    parameters:
      <<: *env-suffix-parameter
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID<< parameters.env_suffix >>
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY<< parameters.env_suffix >>
          aws-region: AWS_REGION

  generate-preview-hash:
    steps:
      - run: echo ENV_PREVIEW_ID=$(echo $CIRCLE_SHA1 | cut -c -7) >> "${BASH_ENV}"

  save-project-dependencies-cache:
    steps:
      - save_cache:
          paths:
            - ./node_modules
            - ./.next/cache
          key: v2-project-dependencies-{{ checksum "package-lock.json" }}

  restore-project-dependencies-cache:
    steps:
      - restore_cache:
          keys:
            - v2-project-dependencies-{{ checksum "package-lock.json" }}
            - v2-project-dependencies-

  slack-notification-onfail:
    parameters:
      <<: *slack-notification-parameters
      error_message:
        description: 'Slack message error'
        default: Something unexpected happened
        type: string

    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":heavy_multiplication_x: Pipeline Error",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Error Message*: << parameters.error_message >>"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*: $(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment*: << parameters.environment >>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*: $(echo $CIRCLE_SHA1 | cut -c -7)"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View CircleCI Pipeline"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: fail
          debug: true
          channel: << parameters.slack_channel >>

  slack-notification-onsuccess-deployment:
    parameters:
      <<: *slack-notification-parameters

    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":white_check_mark: Deployment Successful! :tada:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*: $(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment*: << parameters.environment >>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*: $(echo $CIRCLE_SHA1 | cut -c -7)"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View CircleCI Pipeline"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: pass
          channel: << parameters.slack_channel >>

  slack-notification-wait-for-approval:
    parameters:
      <<: *slack-notification-parameters

    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":hourglass_flowing_sand: Awaiting Approval :raised_hand:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*: $(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Target Environment*: << parameters.environment >>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*: $(echo $CIRCLE_SHA1 | cut -c -7)"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Mentions*: $SLACK_PARAM_MENTIONS"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View CircleCI Pipeline"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: pass
          mentions: '@qa_team'
          channel: << parameters.slack_channel >>

#################################
#
# Jobs start
#
#################################

jobs:
  setup:
    <<: *node-container
    resource_class: small
    steps:
      - checkout
      - restore-project-dependencies-cache
      - run: npx npe scripts.prepare ""
      - run: npm ci
      - save-project-dependencies-cache

  linters:
    <<: *node-container
    resource_class: small
    steps:
      - checkout
      - restore-project-dependencies-cache
      - run: npm run linters-ci

  secrets-key-detection:
    <<: *node-container
    resource_class: small
    steps:
      - checkout
      - run: bash <(curl -s https://raw.githubusercontent.com/zricethezav/gitleaks-ci/master/gitleaks.sh)

  auto-tagging:
    <<: *node-container
    resource_class: small
    steps:
      - checkout
      - restore-project-dependencies-cache
      - run: |
          git config user.email "${GITHUB_DEVOPS_USER_EMAIL}"
          git config user.name "${GITHUB_DEVOPS_USERNAME}"
      - run: npm run release -- --release-as major
      - run: |
          git commit --allow-empty -m "build: [skip ci] Automated Release"
      - run: git push https://$GITHUB_DEVOPS_USERNAME:$GITHUB_DEVOPS_USER_ACCESS_TOKEN@$GITHUB_PROJECT main --follow-tags

  build:
    <<: *node-container
    resource_class: medium #if you can get away with using small, do that,
    # but builds on small tend to use 100% cpu and drag so this might be the best case for medium
    #
    # check circle/ci -> Plan Usage for optimal balance between time/cost
    environment:
      GIT_LFS_SKIP_SMUDGE: 1
    parameters:
      git_lfs:
        description: 'Enable Git LFS'
        default: false
        type: boolean

    steps:
      - checkout
      - when:
          condition: << parameters.git_lfs >>
          steps:
            - run:
                name: Install Git LFS
                command: |
                  sudo apt-get update
                  sudo apt-get install git-lfs
            - run:
                name: Checkout binaries
                command: git lfs pull
            - run:
                name: LFS cache id
                # this generates a unique ID for LFS files which we use for cache
                command: |
                  git lfs ls-files -l | cut -d' ' -f1 | sort > .assets-id
            - restore_cache:
                keys:
                  - v1-lfs-assets-{{ checksum ".assets-id" }}
      - restore-project-dependencies-cache

      - run:
          name: Running Build Script
          command: bash .circleci/scripts/build.sh

      - persist_to_workspace:
          root: .
          paths:
            - ./out

  # this builds the preview environment on PRs
  # right now it builds on *each* commit in a PR (make sure circleci config is to run on PR only)
  # which crates multiple preview environments since it's based on the commit hash
  # TODO: update this so it's based on the PR number
  # note however if you deploy to the same PR number preview environment that you'd then need to
  # invalidate cache
  #
  preview-environment:
    <<: *node-container
    resource_class: medium
    environment:
      GIT_LFS_SKIP_SMUDGE: 1
    parameters:
      <<: *env-suffix-parameter
    steps:
      - checkout
      - attach_workspace:
          at: .
      - configure-aws-cli:
          env_suffix: << parameters.env_suffix >>
      - github-cli/setup:
          token: GITHUB_DEVOPS_USER_ACCESS_TOKEN
      - generate-preview-hash
      - run: aws s3 sync ./out/ s3://$S3_ORIGIN<< parameters.env_suffix >>/preview/$ENV_PREVIEW_ID
      - run:
          command: |
            gh pr comment $CIRCLE_PR_NUMBER --body "[AUTOMATED] Latest version has been pushed to preview.

            Preview deployed at https://preview-$ENV_PREVIEW_ID.$ENVIRONMENT_DOMAIN<< parameters.env_suffix >>" || true

  storybook:
    <<: *node-container
    resource_class: medium
    parameters:
      <<: *env-suffix-parameter

    steps:
      - checkout
      - configure-aws-cli:
          env_suffix: << parameters.env_suffix >>
      - restore-project-dependencies-cache
      - run: npm run build:storybook
      - run: aws s3 sync ./storybook s3://$S3_ORIGIN<< parameters.env_suffix >>/storybook

  deployment:
    <<: *node-container

    parameters:
      <<: *env-suffix-parameter
      ci_env:
        description: 'CI Environment'
        default: 'development'
        type: enum
        enum: ['development', 'staging', 'production']
      gtm_id:
        description: 'GTM Container ID'
        default: 'GTM-0000000'
        type: string

    environment:
      CI_ENV: << parameters.ci_env >>
      NODE_ENV: << parameters.ci_env >>
      GTM_ID: << parameters.gtm_id >>

    steps:
      - checkout
      - attach_workspace:
          at: .
      - configure-aws-cli:
          env_suffix: << parameters.env_suffix >>
      - run: |
          echo 'export S3_ORIGIN_BUCKET=$(echo $S3_ORIGIN<< parameters.env_suffix >>)' >> $BASH_ENV
          echo 'export WEBSITE_SITE_URL=$(echo https://$ENVIRONMENT_DOMAIN<< parameters.env_suffix >>)' >> $BASH_ENV
      - run:
          name: Run commands
          command: |
            echo "I will exit fail status"
            exit 1
      - run:
          name: Deploying artifact
          command: bash .circleci/scripts/deploy.sh

  cache-invalidation:
    <<: *node-container

    parameters:
      <<: *env-suffix-parameter

    steps:
      - checkout
      - configure-aws-cli:
          env_suffix: << parameters.env_suffix >>
      - run: |
          echo 'export DISTRIBUTION_ID=$(echo $CLOUDFRONT_ID<< parameters.env_suffix >>)' >> $BASH_ENV
      - run:
          name: Invalidating cache
          command: bash .circleci/scripts/cache-invalidate.sh

  slack-notification-approval:
    <<: *node-container

    parameters:
      <<: *slack-notification-parameters

    steps:
      - slack-notification-wait-for-approval:
          environment: << parameters.environment >>
          slack_channel: << parameters.slack_channel >>

  dast:
    <<: *node-container
    steps:
      - run: echo "DAST"

  integration-tests:
    <<: *node-container
    steps:
      - run: echo "Integration Tests"

  performance-tests:
    <<: *node-container
    steps:
      - run: echo "Performance Tests"

  pen-test:
    <<: *node-container
    steps:
      - run: echo "Pen Test"

  accessibility-tests:
    <<: *node-container
    steps:
      - run: echo "Accessibility Test"

  qa-tests:
    <<: *node-container
    steps:
      - run: echo "QA Test"

  social-test:
    <<: *node-container
    steps:
      - run: echo "Social Tests"

  content-tests:
    <<: *node-container
    steps:
      - run: echo "Content Tests"

  seo-tests:
    <<: *node-container
    steps:
      - run: echo "SEO"

#################################
#
# Workflows start
#
#################################
workflows:
  version: 2
  pull-requests:
    jobs:
      - setup:
          filters:
            branches:
              ignore: main
      - linters:
          name: linters
          requires:
            - setup
      - secrets-key-detection:
          requires:
            - setup
      - build:
          requires:
            - linters
            - secrets-key-detection
      - preview-environment:
          context: GITHUB_CREDENTIALS
          requires:
            - build
          env_suffix: '_DEV'

  main:
    jobs:
      - setup:
          filters:
            branches:
              only: main
      - build:
          requires:
            - setup
      - deployment:
          name: deployment-develop
          context: SLACK_CREDENTIALS
          requires:
            - build
          ci_env: 'development'
          env_suffix: '_DEV'
          post-steps:
            - slack-notification-onfail:
              environment: 'Develop'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Deployment Failed'
      - cache-invalidation:
          name: cache-invalidation-develop
          context: SLACK_CREDENTIALS
          requires:
            - deployment-develop
          env_suffix: '_DEV'
          post-steps:
            - slack-notification-onfail:
              environment: 'Develop'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: Cache Invalidation Failed
            - slack-notification-onsuccess-deployment:
              environment: 'Develop'
              slack_channel: $SLACK_CHANNEL_ID
      - integration-tests:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-develop
          post-steps:
            - slack-notification-onfail:
              environment: 'Develop'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Integration Tests Failed'
      - performance-tests:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-develop
          post-steps:
            - slack-notification-onfail:
              environment: 'Develop'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Performance Tests Failed'

      ###### BEGIN: OPTIONAL STAGING APPROVAL GATE ######
      ## Comment out if the approval is not needed
      - slack-notification-approval:
          name: slack-notification-approval-staging
          context: SLACK_CREDENTIALS
          requires:
            - integration-tests
            - performance-tests
          environment: 'Staging'
          slack_channel: $SLACK_CHANNEL_ID

      - approve-build-staging:
          type: approval
          requires:
            - slack-notification-approval-staging
      ###### END: OPTIONAL STAGING APPROVAL GATE ######

      - deployment:
          name: deployment-staging
          context: SLACK_CREDENTIALS
          requires:
            - approve-build-staging
          ci_env: 'staging'
          env_suffix: '_STAGE'
          post-steps:
            - slack-notification-onfail:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Deployment Failed'
      - cache-invalidation:
          name: cache-invalidation-staging
          context: SLACK_CREDENTIALS
          requires:
            - deployment-staging
          env_suffix: '_STAGE'
          post-steps:
            - slack-notification-onfail:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Cache Invalidation Failed'
            - slack-notification-onsuccess-deployment:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
      - storybook:
          context: SLACK_CREDENTIALS
          requires:
            - deployment-staging
          env_suffix: '_STAGE'
          post-steps:
            - slack-notification-onfail:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Storybook Deployment Failed'
      - dast:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-staging
          post-steps:
            - slack-notification-onfail:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'DAST Failed'
      - pen-test:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-staging
          post-steps:
            - slack-notification-onfail:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Pen Test Failed'
      - accessibility-tests:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-staging
          post-steps:
            - slack-notification-onfail:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Accessibility Tests Failed'
      - qa-tests:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-staging
          post-steps:
            - slack-notification-onfail:
              environment: 'Staging'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Automated QA Tests Failed'

      ###### BEGIN: OPTIONAL PRODUCTION APPROVAL GATE ######
      ## Comment out if the approval is not needed
      - slack-notification-approval:
          name: slack-notification-approval-production
          context: SLACK_CREDENTIALS
          requires:
            - dast
            - accessibility-tests
          environment: 'Production'
          slack_channel: $SLACK_CHANNEL_ID

      - approve-build-production:
          context: SLACK_CREDENTIALS
          type: approval
          requires:
            - slack-notification-approval-production
      ###### END: OPTIONAL PRODUCTION APPROVAL GATE ######

      - deployment:
          name: deployment-production
          context: SLACK_CREDENTIALS
          requires:
            - approve-build-production
          ci_env: 'production'
          env_suffix: '_PROD'
          post-steps:
            - slack-notification-onfail:
              environment: 'Production'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Deployment Failed'
      - cache-invalidation:
          name: cache-invalidation-production
          context: SLACK_CREDENTIALS
          requires:
            - deployment-production
          env_suffix: '_PROD'
          post-steps:
            - slack-notification-onfail:
              environment: 'Production'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Cache Invalidation Failed'
            - slack-notification-onsuccess-deployment:
              environment: 'Production'
              slack_channel: $SLACK_CHANNEL_ID
      - social-test:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-production
          post-steps:
            - slack-notification-onfail:
              environment: 'Production'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Social Tests Failed'
      - content-tests:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-production
          post-steps:
            - slack-notification-onfail:
              environment: 'Production'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Content Tests Failed'
      - seo-tests:
          context: SLACK_CREDENTIALS
          requires:
            - cache-invalidation-production
          post-steps:
            - slack-notification-onfail:
              environment: 'Production'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'SEO Tests Failed'
      - auto-tagging:
          context:
            - GITHUB_CREDENTIALS
            - SLACK_CREDENTIALS
          requires:
            - cache-invalidation-production
          post-steps:
            - slack-notification-onfail:
              environment: 'Production'
              slack_channel: $SLACK_CHANNEL_ID
              error_message: 'Autotagging Failed'
